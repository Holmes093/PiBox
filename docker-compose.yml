############### Complete Home Control Compose ###############

version: '3.7'

#################### Networks

networks:
  proxy:
    external:
      name: proxy
  default:
    driver: bridge

#################### Services 

services:

########## Container Management ##########

##### Watchtower

 watchtower:
  container_name: watchtower
  image: containrrr/watchtower:armhf-latest
  restart: unless-stopped
  networks:
   - proxy
  volumes:
   - /var/run/docker.sock:/var/run/docker.sock
  command: hass homebridge tvheadend --debug --cleanup

########## Web Server/Reverse Proxy ##########

##### Traefik - Reverse Proxy

 traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      #- --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      #- --api.insecure=true
      #- --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      #- --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      proxy:
        ipv4_address: 192.168.0.254
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKER/traefik/acme/acme.json:/acme.json 
      - $DOCKER/traefik/traefik.log:/traefik.log
      - $DOCKER/traefik/rules:/rules 
      - $DOCKER/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
    # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`monitor.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
     #- "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
     #- "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
     #- "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
    # Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
    ## Middelwares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 

##### Caddy - Static File Hosting

 caddy:
  container_name: caddy
  image: caddy:latest
  restart: unless-stopped
  networks:
   - proxy
  ports:
   - 8000:80
  environment:
   - TZ=${TZ}
   - PGID=${PGID}
   - PUID=${PUID}
  volumes:
   - $DOCKER/caddy/.well-known/matrix:/usr/share/caddy/.well-known/matrix
  labels:
   - "traefik.enable=true"
   ## HTTP Routers
   - "traefik.http.routers.caddy-rtr.entrypoints=https"
   - "traefik.http.routers.caddy-rtr.rule=Host(`$DOMAINNAME`) && PathPrefix(`/.well-known/matrix`)"
   - "traefik.http.routers.caddy-rtr.tls=true"
   ## HTTP Services
   - "traefik.http.routers.caddy-rtr.service=caddy"
   - "traefik.http.services.caddy.loadbalancer.server.port=80"

##### PiHole - Network-wide AdBlock

 pihole:
  container_name: pihole
  image: pihole/pihole:latest
  restart: unless-stopped
  networks:
   - proxy
  ports:
   - "5052:53/tcp"
   - "5053:53/udp"
   - "6767:67/udp"
   - "9000:80/tcp"
   - "4433:443/tcp"
  environment:
   - TZ=${TZ}
   - PGID=${PGID}
   - PUID=${PUID}
   - WEBPASSWORD=${PIPASS}
  volumes:
   - "$DOCKER/pihole/etc-pihole/:/etc/pihole/"
   - "$DOCKER/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/"
  dns:
   - 127.0.0.1
   - 1.1.1.1

########## Smart Home Services ##########

##### Home Assistant - Smart Home Control System

 hass:
  container_name: hass
  image: homeassistant/raspberrypi3-homeassistant:latest
  restart: unless-stopped
  networks:
   - proxy
  ports:
   - 8123:8123
   - 5353:5353
   - 51827:51827
  environment:
   - TZ=${TZ}
   - PGID=${PGID}
   - PUID=${PUID}
  devices:
   - "/dev/ttyUSB0:/dev/ttyUSB0"
  volumes:
   - $DOCKER/hass:/config
  labels:
   - "traefik.enable=true"
   ## HTTP Routers
   - "traefik.http.routers.hass-rtr.entrypoints=https"
   - "traefik.http.routers.hass-rtr.rule=Host(`home.$DOMAINNAME`)"
   - "traefik.http.routers.hass-rtr.tls=true"
   ## HTTP Services
   - "traefik.http.routers.hass-rtr.service=hass"
   - "traefik.http.services.hass.loadbalancer.server.port=8123"

##### Homebridge - Homekit Bridge

 homebridge:
  container_name: homebridge
  image: oznu/homebridge:raspberry-pi
  restart: unless-stopped
  networks:
   - proxy
  ports:
   - 8081:8080
   - 51826:51826
  environment:
   - TZ=${TZ}
   - PGID=${PGID}
   - PUID=${PUID}
   - HOMEBRIDGE_CONFIG_UI=1
   - HOMEBRIDGE_CONFIG_UI_PORT=8080
  volumes:
   - $DOCKER/homebridge:/homebridge

########## LiveTV - DTV  ##########

##### TVHeadend - TV Software

 tvheadend:
  container_name: tvheadend
  image: linuxserver/tvheadend:arm32v7-latest
  restart: always
  network_mode: "host"
  environment:
   - TZ=Europe/London
   - PGID=${PGID}
   - PUID=${PUID}
  volumes:
   - $DOCKER/tvheadend:/config
   - $DOCKER/tvheadend/picons:/picons
